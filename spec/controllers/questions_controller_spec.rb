require 'rails_helper'
include RandomData

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe QuestionsController, type: :controller do

  let(:my_question) do
    Question.create(
      id: 1,
      title: RandomData.random_sentence,
      body: RandomData.random_paragraph,
      resolved: false
    )
  end

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to be_success
    end

    it "assigns my_question to @question" do
      get :index
      expect(assigns(:questions)).to eq([my_question])
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, { id: my_question.id }
      expect(response).to be_success
    end

    it "renders the show view" do
      get :show, { id: my_question.id }
      expect(response).to render_template :show
    end

    it "assigns my_question to @question" do
      get :show, { id: my_question.id }
      expect(assigns(:question)).to eq(my_question)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new
      expect(response).to be_success
    end

    it "renders the new view" do
      get :new, { id: my_question.id }
      expect(response).to render_template :new
    end

    it "instantiates @question" do
      get :new, { id: my_question.id }
      expect(assigns(:question)).not_to be_nil
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      get :edit, { id: my_question.id }
      expect(response).to be_success
    end

    it "renders the edit view" do
      get :edit, { id: my_question.id }
      expect(response).to render_template :edit
    end
  end

  describe "POST #create" do
    it "creates a new Question" do
      expect { post :create, {question: {title: "Title", body: "Body", resolved: false}}}.to change(Question, :count).by(1)
    end

    it "assigns the new question to @question" do
      post :create, {question: my_question.attributes}
      expect(assigns(:question)).to eq Question.last
    end

    it "redirects to the new question" do
      post :create, {question: my_question.attributes}
      expect(response).to redirect_to Question.last
    end
  end

  describe "PUT #update" do
    new_title = RandomData.random_sentence
    new_body = RandomData.random_paragraph

    it "updates the requested question" do
      put :update, id: my_question.id, question: {title: new_title, body: new_body, resolved: false}
      expect(assigns(:question).id).to eq my_question.id
      expect(assigns(:question).title).to eq new_title
      expect(assigns(:question).body).to eq new_body
    end

    it "redirects to the updated question" do
      put :update, id: my_question.id, question: {title: new_title, body: new_body, resolved: false}
      expect(response).to redirect_to my_question
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested question" do
      delete :destroy, {id: my_question.id}
      expect(Question.where({id: my_question.id}).size).to eq 0
    end

    it "redirects to the questions list" do
      delete :destroy, {id: my_question.id}
      expect(response).to redirect_to(questions_url)
    end
  end
end
